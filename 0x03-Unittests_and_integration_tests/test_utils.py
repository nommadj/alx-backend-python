"""Unit tests for utils.py."""\n\nimport unittest\nfrom unittest.mock import patch\nimport utils\n\nclass TestUtils(unittest.TestCase):\n\n    @classmethod\n    def setUpClass(cls):\n        cls.get_patcher = patch(\"utils.requests.get\")\n        cls.mock_get = cls.get_patcher.start()\n\n    @classmethod\n    def tearDownClass(cls):\n        cls.get_patcher.stop()\n\n    def test_has_license_true(self):\n        repo = {\"license\": {\"key\": \"mit\"}}\n        self.assertTrue(utils.has_license(repo))\n\n    def test_has_license_false(self):\n        repo = {\"license\": None}\n        self.assertFalse(utils.has_license(repo))\n\n    def test_get_license_valid(self):\n        repo = {\"license\": {\"key\": \"apache-2.0\"}}\n        self.assertEqual(utils.get_license(repo), \"apache-2.0\")\n\n    def test_get_license_none(self):\n        repo = {}\n        self.assertIsNone(utils.get_license(repo))\n\n    def test_get_repos_success(self):\n        self.mock_get.return_value.status_code = 200\n        self.mock_get.return_value.json.return_value = [{\"name\": \"repo1\"}]\n        repos = utils.get_repos(\"alx\")\n        self.assertIsInstance(repos, list)\n        self.assertEqual(repos[0][\"name\"], \"repo1\")\n\n    def test_get_repos_failure(self):\n        self.mock_get.return_value.status_code = 404\n        repos = utils.get_repos(\"nonexistent\")\n        self.assertEqual(repos, [])
