#!/usr/bin/env python3\n"""unit and integration tests for client"""\nimport unittest\nfrom unittest.mock import patch, PropertyMock, Mock\nfrom parameterized import parameterized, parameterized_class\nfrom client import GithubOrgClient\nfrom fixtures import TEST_PAYLOAD\n\nclass TestGithubOrgClient(unittest.TestCase):\n    @parameterized.expand([\n        (\"google\",),\n        (\"abc\",),\n    ])\n    @patch(\"client.get_json\")\n    def test_org(self, org_name, mock_get_json):\n        test_payload = {\"login\": org_name}\n        mock_get_json.return_value = test_payload\n        client = GithubOrgClient(org_name)\n        self.assertEqual(client.org, test_payload)\n        mock_get_json.assert_called_once_with(f\"https://api.github.com/orgs/{org_name}\")\n\n    def test_public_repos_url(self):\n        with patch(\"client.GithubOrgClient.org\", new_callable=PropertyMock) as mock_org:\n            mock_org.return_value = {\"repos_url\": \"http://test-url.com\"}\n            client = GithubOrgClient(\"test\")\n            self.assertEqual(client._public_repos_url, \"http://test-url.com\")\n\n    @patch(\"client.get_json\", return_value=[{\"name\": \"repo1\"}, {\"name\": \"repo2\"}])\n    def test_public_repos(self, mock_get_json):\n        with patch(\"client.GithubOrgClient._public_repos_url\", return_value=\"http://some_url\"):\n            client = GithubOrgClient(\"test\")\n            self.assertEqual(client.public_repos(), [\"repo1\", \"repo2\"])\n            mock_get_json.assert_called_once()\n\n    @parameterized.expand([\n        ({\"license\": {\"key\": \"my_license\"}}, \"my_license\", True),\n        ({\"license\": {\"key\": \"other_license\"}}, \"my_license\", False),\n    ])\n    def test_has_license(self, repo, license_key, expected):\n        client = GithubOrgClient(\"test\")\n        self.assertEqual(client.has_license(repo, license_key), expected)\n\n@parameterized_class([\n    {\n        \"org_payload\": TEST_PAYLOAD[\"org_payload\"],\n        \"repos_payload\": TEST_PAYLOAD[\"repos_payload\"],\n        \"expected_repos\": TEST_PAYLOAD[\"expected_repos\"],\n        \"apache2_repos\": TEST_PAYLOAD[\"apache2_repos\"]\n    }\n])\nclass TestIntegrationGithubOrgClient(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        cls.get_patcher = patch(\"requests.get\")\n        cls.mock_get = cls.get_patcher.start()\n\n        def side_effect(url):\n            mock_response = Mock()\n            if url.endswith(\"orgs/google\"):\n                mock_response.json.return_value = cls.org_payload\n            elif url.endswith(\"orgs/google/repos\"):\n                mock_response.json.return_value = cls.repos_payload\n            return mock_response\n\n        cls.mock_get.side_effect = side_effect\n\n    @classmethod\n    def tearDownClass(cls):\n        cls.get_patcher.stop()\n\n    def test_public_repos(self):\n        client = GithubOrgClient(\"google\")\n        self.assertEqual(client.public_repos(), self.expected_repos)\n\n    def test_public_repos_with_license(self):\n        client = GithubOrgClient(\"google\")\n        self.assertEqual(client.public_repos(\"apache-2.0\"), self.apache2_repos)
